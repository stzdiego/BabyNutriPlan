// <auto-generated />
using System;
using BabyNutriPlan.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrations.Migrations
{
    [DbContext(typeof(BabyNutriPlanContext))]
    [Migration("20231120165636_Icon Null")]
    partial class IconNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Attach", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("RowId");

                    b.HasIndex("Name");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("ATTACHS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Attendant", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cel")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cel");

                    b.Property<short>("Children")
                        .HasColumnType("smallint")
                        .HasColumnName("children");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("id_type");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Occupation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("occupation");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int>("RowidUser")
                        .HasColumnType("integer")
                        .HasColumnName("rowid_user");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("state");

                    b.Property<string>("Tel")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tel");

                    b.HasKey("RowId");

                    b.HasIndex("RowidUser");

                    b.HasIndex("Id", "IdentificationType")
                        .IsUnique();

                    b.ToTable("ATTENDANTS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.AttendantPatient", b =>
                {
                    b.Property<int>("Rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rowid"));

                    b.Property<string>("AttendantType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("attendant_type");

                    b.Property<int>("RowidAttendant")
                        .HasColumnType("integer")
                        .HasColumnName("rowid_attendant");

                    b.Property<int>("RowidPatient")
                        .HasColumnType("integer")
                        .HasColumnName("rowid_patient");

                    b.HasKey("Rowid");

                    b.HasIndex("RowidPatient");

                    b.HasIndex("RowidAttendant", "RowidPatient")
                        .IsUnique();

                    b.ToTable("ATTENDANTS_PATIENTS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.City", b =>
                {
                    b.Property<int>("Rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rowid"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RowidState")
                        .HasColumnType("int")
                        .HasColumnName("rowid_state");

                    b.HasKey("Rowid");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RowidState");

                    b.ToTable("CITIES");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Country", b =>
                {
                    b.Property<int>("Rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rowid"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Rowid");

                    b.ToTable("COUNTRIES");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Food", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAllergeneric")
                        .HasColumnType("bool")
                        .HasColumnName("is_allergeneric");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int>("RowidFoodGroup")
                        .HasColumnType("int")
                        .HasColumnName("rowid_food_group");

                    b.HasKey("RowId");

                    b.HasIndex("RowidFoodGroup");

                    b.ToTable("FOODS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.FoodGroup", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.HasKey("RowId");

                    b.ToTable("FOOD_GROUPS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Incident", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int>("RowidAttendant")
                        .HasColumnType("int")
                        .HasColumnName("rowid_attendant");

                    b.Property<int>("RowidPatient")
                        .HasColumnType("int")
                        .HasColumnName("rowid_patient");

                    b.Property<int>("RowidPlanDay")
                        .HasColumnType("int")
                        .HasColumnName("rowid_plan_day");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("RowId");

                    b.HasIndex("RowidAttendant");

                    b.HasIndex("RowidPatient");

                    b.HasIndex("RowidPlanDay");

                    b.ToTable("INCIDENTS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Patient", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("AttendantRowId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cel")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cel");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("id_type");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Occupation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("occupation");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int>("RowidPediatrician")
                        .HasColumnType("integer")
                        .HasColumnName("rowid_pediatrician");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("state");

                    b.Property<string>("Tel")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tel");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("RowId");

                    b.HasIndex("AttendantRowId");

                    b.HasIndex("RowidPediatrician");

                    b.HasIndex("Id", "IdentificationType")
                        .IsUnique();

                    b.ToTable("PATIENTS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Pediatrician", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cel")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cel");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdProfessional")
                        .HasColumnType("int")
                        .HasColumnName("id_professional");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("id_type");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Occupation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("occupation");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("promotion_date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int?>("RowidAttachPhoto")
                        .HasColumnType("int")
                        .HasColumnName("rowid_attach_photo");

                    b.Property<int>("RowidUser")
                        .HasColumnType("int")
                        .HasColumnName("rowid_user");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("state");

                    b.Property<string>("Tel")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tel");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("university");

                    b.HasKey("RowId");

                    b.HasIndex("RowidAttachPhoto");

                    b.HasIndex("RowidUser");

                    b.HasIndex("Id", "IdentificationType")
                        .IsUnique();

                    b.ToTable("PEDIATRICIANS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Plan", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateOnly>("InitialDay")
                        .HasColumnType("date")
                        .HasColumnName("initial_day");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int>("RowidPatient")
                        .HasColumnType("int")
                        .HasColumnName("rowid_patient");

                    b.HasKey("RowId");

                    b.HasIndex("RowidPatient");

                    b.ToTable("PLANS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.PlanDay", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date")
                        .HasColumnName("day");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int>("RowidFood")
                        .HasColumnType("int")
                        .HasColumnName("rowid_food");

                    b.Property<int>("RowidPlan")
                        .HasColumnType("int")
                        .HasColumnName("rowid_plan");

                    b.HasKey("RowId");

                    b.HasIndex("RowidFood");

                    b.HasIndex("RowidPlan");

                    b.ToTable("PLAN_DAY");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Role", b =>
                {
                    b.Property<int>("Rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rowid"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Rowid");

                    b.ToTable("ROLES");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.State", b =>
                {
                    b.Property<int>("Rowid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rowid"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RowidCountry")
                        .HasColumnType("int")
                        .HasColumnName("rowid_country");

                    b.HasKey("Rowid");

                    b.HasIndex("RowidCountry");

                    b.ToTable("STATES");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.User", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RowId"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int")
                        .HasColumnName("attempts");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Password")
                        .HasMaxLength(24)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("rowversion");

                    b.Property<int?>("RowidRole")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("rowid_role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("RowId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RowidRole");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Attendant", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("RowidUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.AttendantPatient", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Attendant", "Attendant")
                        .WithMany()
                        .HasForeignKey("RowidAttendant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyNutriPlan.Shared.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("RowidPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendant");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.City", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("RowidState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Food", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.FoodGroup", "FoodGroup")
                        .WithMany()
                        .HasForeignKey("RowidFoodGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodGroup");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Incident", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Attendant", "Attendant")
                        .WithMany()
                        .HasForeignKey("RowidAttendant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyNutriPlan.Shared.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("RowidPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyNutriPlan.Shared.Entities.PlanDay", "PlanDay")
                        .WithMany()
                        .HasForeignKey("RowidPlanDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendant");

                    b.Navigation("Patient");

                    b.Navigation("PlanDay");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Patient", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Attendant", null)
                        .WithMany("Patients")
                        .HasForeignKey("AttendantRowId");

                    b.HasOne("BabyNutriPlan.Shared.Entities.Pediatrician", "Pediatrician")
                        .WithMany("Patients")
                        .HasForeignKey("RowidPediatrician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pediatrician");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Pediatrician", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Attach", "AttachPhoto")
                        .WithMany()
                        .HasForeignKey("RowidAttachPhoto");

                    b.HasOne("BabyNutriPlan.Shared.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("RowidUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachPhoto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Plan", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("RowidPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.PlanDay", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("RowidFood")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyNutriPlan.Shared.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("RowidPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.State", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("RowidCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.User", b =>
                {
                    b.HasOne("BabyNutriPlan.Shared.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RowidRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Attendant", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BabyNutriPlan.Shared.Entities.Pediatrician", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
